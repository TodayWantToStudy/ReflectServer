#include"unp.h"
int main(int argc, char** argv){
	char buf[MAXLINE];
	int i, n;
	int listenfd, connfd, sockfd;
	struct sockaddr_in server_address, client_address;

	//填写套接字地址结构体
	bzero(&server_address, sizeof(server_address));
	server_address.sin_family = AF_INET;
	server_address.sin_addr.s_addr = htonl(INADDR_ANY);
	server_address.sin_port = htons(SERVER_PORT);

	//1.socket() :创建套接字，指定期望的通信协议类型
	listenfd = socket(AF_INET, SOCK_STREAM, 0);
	assert(listenfd >= 0);
	//2.bind() :绑定本地协议地址，指定套接字的本地协议地址。
	int ret = bind(listenfd, (struct sockaddr*)&server_address, sizeof(server_address));
	assert(ret != -1);
	//3.listen() :将主动套接字转换为被动套接字
	ret = listen(listenfd, 5);
	assert(ret != -1);


	int client[FD_SETSIZE];
	for(i=0; i<FD_SETSIZE; i++){
		client[i] = -1;
	}

	int maxi = -1;
	int maxfd = listenfd;
	fd_set rset, allset;
	FD_ZERO(&allset);
	FD_SET(listenfd, &allset);	//总是监听listenfd
	for( ; ; ){
		rset = allset;
		int nready = select(maxfd+1, &rset, NULL, NULL, NULL);
		if(nready < 0)
			err_sys("select error");
		if(FD_ISSET(listenfd, &rset)){
			socklen_t client_addrlength = sizeof(client_address);
			connfd = accept(listenfd, (struct sockaddr*)&client_address, &client_addrlength);
			for(i=0; i<FD_SETSIZE; i++){
				if(client[i]==-1){
					client[i] = connfd;
					break;
				}
			}
			if(i == FD_SETSIZE)
				err_sys("too many client");

			FD_SET(connfd, &allset);
			maxi = max(maxi, i);
			maxfd = max(maxfd, connfd);

			if(--nready <= 0)
				continue;
		}

		for(i=0; i<maxi; i++){
			if((sockfd = client[i]) < 0)
				continue;

			if(FD_ISSET(sockfd, &rset)){
				n = read(sockfd, buf, MAXLINE);
				if(n < 0)
					err_sys("read error");
				else if(n > 0)
					Writen(sockfd, buf, n);
				else if(n == 0){
					close(sockfd);
					FD_CLR(sockfd, &allset);
					client[i] = -1;
				}
				if(--nready <= 0)
					break;
			}
		}

	}
}

